

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  clip-path: inset(50%);
  border: 0;
}

@mixin qm-background {
  background: $q-grey-cool; /* Old browsers */

}

@mixin icomoon-styles {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: "icomoon" !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;
@function rem-separator($list, $separator: false) {
  @if $separator== "comma" or $separator== "space" {
    @return append($list, null, $separator);
  }
  @if function-exists("list-separator") ==true {
    @return list-separator($list);
  }
  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }
  @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to== "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if
      type-of($value) ==
      "number" and
      unit($value) ==
      "px" and
      $to==
      "rem"
    {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }
  @return if(length($result) ==1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

@mixin vendorPrefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  // Output standard non-prefixed declaration
  #{$property}: $value;
}

@mixin qm-child-view {
  height: 100vh;
  width: 100vw;
  position: absolute;
}
//common style to add ellipsis to text
//When use with flexbox use "min-width:0;" in parent to avoid style errors
@mixin add-text-ellipsis {
  white-space: nowrap;
  width: 100%;
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
}

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($qm-device-breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($qm-device-breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($qm-device-breakpoints)}.";
  }
}

$xs-width: map-get($qm-device-breakpoints, xs-width );
$sm-width: map-get($qm-device-breakpoints, sm-width );
$md-width: map-get($qm-device-breakpoints, md-width );
$lg-width: map-get($qm-device-breakpoints, lg-width );

@mixin qm-xs-portrait {
  @media (min-width: #{$xs-width}) and (max-width: #{$sm-width - 1px}) and (orientation: portrait){
    @content;
  }
}

@mixin qm-xs-landscape {
  @media (min-width: #{$xs-width}) and (max-width: #{$sm-width - 1px}) and (orientation: landscape){
    @content;
  }
}

@mixin qm-xs-lower {
  @media (max-width: #{$xs-width}) {
    @content;
  }
}

@mixin qm-xs {
  @media (min-width: #{$xs-width}) and (max-width: #{$sm-width - 1px}) {
    @content;
  }
}

@mixin qm-sm {
  @media (min-width: #{$sm-width}) and (max-width: #{$md-width - 1px}){
    @content;
  }
}

@mixin qm-sm-only {
  @media (width: #{$sm-width}) {
    @content;
  }
}


@mixin qm-md {
  @media (min-width: #{$md-width}) and (max-width: #{$lg-width - 1px}){
    @content;
  }
}

@mixin qm-sm-to-md {
  @media (min-width: #{$sm-width + 1px}) and (max-width: #{$md-width - 1px}){
    @content;
  }
}

@mixin qm-lg {
  @media (min-width: #{$lg-width}) {
    @content;
  }
}

$xs-height: map-get($qm-height-breakpoints, xs-height );
$sm-height: map-get($qm-height-breakpoints, sm-height );
$md-height: map-get($qm-height-breakpoints, md-height );
$lg-height: map-get($qm-height-breakpoints, lg-height );


@mixin qm-xs-height-lower {
  @media (max-height: #{$xs-height}) {
    @content;
  }
}